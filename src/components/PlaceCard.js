import React from 'react';
import { FaMapMarkerAlt, FaStar, FaParking, FaBaby, FaCoffee } from 'react-icons/fa';
import './PlaceCard.css';

function PlaceCard({ place, onClick, userProfile }) {
  const getAgeRecommendation = () => {
    const details = place.place_details;
    if (!details) return null;

    // Î™®Îì† Ïó∞Î†πÎåÄ ÌèâÍ∞Ä
    const ageGroups = [
      { key: 'age_0_12_months', label: '0-12Í∞úÏõî' },
      { key: 'age_12_24_months', label: '12-24Í∞úÏõî' },
      { key: 'age_24_48_months', label: '2-4ÏÑ∏' },
      { key: 'age_over_48_months', label: '4ÏÑ∏ Ïù¥ÏÉÅ' },
      { key: 'age_elementary_low', label: 'Ï¥àÎì± Ï†ÄÌïôÎÖÑ' },
      { key: 'age_elementary_high', label: 'Ï¥àÎì± Í≥†ÌïôÎÖÑ' }
    ];

    // 4Ï†ê Ïù¥ÏÉÅÏù∏ Ïó∞Î†πÎåÄÎßå ÌïÑÌÑ∞ÎßÅ
    const recommendedAges = ageGroups.filter(group => {
      const score = details[group.key] || 0;
      return score >= 4;
    });

    // Ïó∞Î†π ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨ (Ïò§Î¶ÑÏ∞®Ïàú)
    const ageOrder = [
      'age_0_12_months',
      'age_12_24_months', 
      'age_24_48_months',
      'age_over_48_months',
      'age_elementary_low',
      'age_elementary_high'
    ];
    
    recommendedAges.sort((a, b) => {
      return ageOrder.indexOf(a.key) - ageOrder.indexOf(b.key);
    });

    return recommendedAges;
  };

  const getCategoryEmoji = (category) => {
    const emojis = {
      'Ïã§ÎÇ¥ÎÜÄÏù¥ÌÑ∞': 'üè†',
      'Î∞ïÎ¨ºÍ¥Ä': 'üèõÔ∏è',
      'ÎèÑÏÑúÍ¥Ä': 'üìö',
      'Í≥µÏõê': 'üå≥',
      'Ï≤¥ÌóòÏãúÏÑ§': 'üé®',
      'Ïπ¥Ìéò': '‚òï',
      'ÎèôÎ¨ºÏõê': 'ü¶Å',
      'Î¨∏ÌôîÏÑºÌÑ∞': 'üé≠'
    };
    return emojis[category] || 'üìç';
  };

  // ÏπúÍ∑ºÌïú ÏÑ§Î™Ö ÏÉùÏÑ±
  const getFriendlyDescription = () => {
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïùò description ÌïÑÎìú ÏÇ¨Ïö©
    return place.description || 'ÏïÑÏù¥ÏôÄ Ìï®Íªò Ï¶êÍ±∞Ïö¥ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇº Ïàò ÏûàÎäî Í≥≥Ïù¥ÏóêÏöî!';
  };

  // ÌôúÎèô Ï†ïÎ≥¥ ÏÉùÏÑ±
  const getActivities = () => {
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïùò highlights ÌïÑÎìú ÏÇ¨Ïö©
    if (place.place_details?.highlights && Array.isArray(place.place_details.highlights)) {
      return place.place_details.highlights.map(highlight => {
        return `${highlight.name} - ${highlight.description}`;
      });
    }
    return ['ÏïÑÏù¥ÏôÄ Ìï®Íªò Ï¶êÍ±∞Ïö¥ ÌôúÎèôÏùÑ Ìï† Ïàò ÏûàÏñ¥Ïöî'];
  };

  // ÏÇ¨Ïö©Ïûê ÏûêÎÖÄ Í∏∞Ï§Ä ÏòàÏÉÅ ÌèâÏ†ê Í≥ÑÏÇ∞ - Home.jsÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Í∞í ÏÇ¨Ïö©
  const getExpectedRating = () => {
    // Home.jsÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ expectedRatingÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
    if (place.expectedRating !== undefined) {
      return parseFloat(place.expectedRating.toFixed(1));
    }
    
    // Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ (ÌõÑÎ≥¥ Ìò∏ÌôòÏÑ±)
    return parseFloat(calculateExpectedRating().toFixed(1));
  };
  const calculateExpectedRating = () => {
    if (!place.place_details) {
      // place_detailsÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
      return 4.2;
    }
    
    // userProfileÏù¥ ÏóÜÍ±∞ÎÇò childrenÏù¥ ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÌèâÏ†ê Í≥ÑÏÇ∞
    if (!userProfile?.children || userProfile.children.length === 0) {
      // Ï†ÑÏ≤¥ Ïó∞Î†πÎåÄ ÌèâÍ∑†ÏúºÎ°ú Í≥ÑÏÇ∞
      const allRatings = [
        place.place_details.age_0_12_months,
        place.place_details.age_13_24_months,
        place.place_details.age_24_48_months,
        place.place_details.age_over_48_months,
        place.place_details.age_elementary_low,
        place.place_details.age_elementary_high
      ].filter(rating => rating && rating > 0);
      
      if (allRatings.length > 0) {
        const avgRating = allRatings.reduce((sum, rating) => sum + rating, 0) / allRatings.length;
        return parseFloat(avgRating.toFixed(1));
      }
      
      // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í
      return 4.0;
    }
    
    let totalRating = 0;
    let count = 0;
    
    userProfile.children.forEach(child => {
      const age = calculateChildAge(child);
      let ageRating = 0;
      
      if (age <= 12) {
        ageRating = place.place_details.age_0_12_months || 0;
      } else if (age <= 24) {
        ageRating = place.place_details.age_12_24_months || 0;
      } else if (age <= 48) {
        ageRating = place.place_details.age_24_48_months || 0;
      } else if (age <= 72) {
        ageRating = place.place_details.age_over_48_months || 0;
      } else if (age <= 108) {
        ageRating = place.place_details.age_elementary_low || 0;
      } else {
        ageRating = place.place_details.age_elementary_high || 0;
      }
      
      if (ageRating > 0) {
        totalRating += ageRating;
        count++;
      }
    });
    
    return count > 0 ? parseFloat((totalRating / count).toFixed(1)) : 4.0;
  };

  const calculateChildAge = (child) => {
    const today = new Date();
    // Îã§Ï§ë ÏïÑÏù¥ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ (birthDate: "YYYY-MM")
    if (child.birthDate) {
      const [year, month] = child.birthDate.split('-').map(Number);
      const birthDate = new Date(year, month - 1);
      const months = (today.getFullYear() - birthDate.getFullYear()) * 12 
                    + (today.getMonth() - birthDate.getMonth());
      return months;
    }
    // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ (birthYear, birthMonth)
    else if (child.birthYear && child.birthMonth) {
      const birthDate = new Date(child.birthYear, child.birthMonth - 1);
      const months = (today.getFullYear() - birthDate.getFullYear()) * 12 
                    + (today.getMonth() - birthDate.getMonth());
      return months;
    }
    return 24; // Í∏∞Î≥∏Í∞í
  };

  const expectedRating = getExpectedRating();
  const amenities = place.place_amenities;

  return (
    <div className="place-card" onClick={onClick}>
      <div className="place-card-header">
        <div className="place-category">
          <span className="category-emoji">{getCategoryEmoji(place.category)}</span>
          <span className="category-name">{place.category}</span>
        </div>
        <div className="expected-rating-corner">
          <FaStar className="rating-star" />
          <span>{expectedRating.toFixed(1)}</span>
        </div>
      </div>

      <h3 className="place-name">
        {place.name}
      </h3>
      
      <div className="place-location">
        <FaMapMarkerAlt />
        <span>{place.address ? place.address.split(' ').slice(0, 2).join(' ') : 'ÎåÄÏ†Ñ'}</span>
      </div>

      {getAgeRecommendation() && getAgeRecommendation().length > 0 && (
        <div className="age-recommendation-inline">
          <span className="age-label">Ïù∏Í∏∞ Ïó∞Î†πÎåÄ:</span>
          <div className="age-chips">
            {getAgeRecommendation().slice(0, 3).map((ageGroup, index) => (
              <span key={index} className="age-chip">
                {ageGroup.label}
              </span>
            ))}
          </div>
        </div>
      )}

      <div className="place-description">
        {getFriendlyDescription()}
      </div>

      <div className="place-activities">
        {getActivities().slice(0, 3).map((activity, index) => (
          <div key={index} className="activity-item">
            <span className="bullet">‚Ä¢</span>
            <span>{activity}</span>
          </div>
        ))}
      </div>

      <div className="place-amenities">
        {amenities?.parking_available && (
          <span className="amenity-icon" title="Ï£ºÏ∞® Í∞ÄÎä•">
            <FaParking />
          </span>
        )}
        {amenities?.nursing_room && (
          <span className="amenity-icon" title="ÏàòÏú†Ïã§">
            <FaBaby />
          </span>
        )}
        {amenities?.cafe_inside && (
          <span className="amenity-icon" title="Ïπ¥Ìéò">
            <FaCoffee />
          </span>
        )}
      </div>
    </div>
  );
}

export default PlaceCard;
